/*                                                                              
 * cpu_modrm.h                                                              
 *                                                                              
 * This program is free software; you can redistribute it and/or modify it      
 * under the terms of the GNU General Public License as published by the        
 * Free Software Foundation; either version 2, or (at your option) any          
 * later version.                                                               
 *                                                                              
 * This program is distributed in the hope that it will be useful, but          
 * WITHOUT ANY WARRANTY; without even the implied warranty of                   
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU            
 * General Public License for more details.                                     
 */

/* Generated by gen_modrm.pl */

#ifndef __CPU_MODRM_H
#define __CPU_MODRM_H

#define disp8 fetchb()
#define disp16 fetchw()

bit8u  *rm8;
bit16u *rm16;
bit32u *rm32;

bit8u  *r8;
bit16u *r16;
bit32u *r32;

bit8u   opex;

void fetch_modrm8()
{
	switch(fetchb())
	{
		case 0x00: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x01: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x02: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x03: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x04: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x05: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x06: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x07: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x08: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x09: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x0A: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x0B: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x0C: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x0D: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x0E: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x0F: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x10: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x11: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x12: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x13: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x14: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x15: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x16: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x17: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x18: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x19: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x1A: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x1B: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x1C: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x1D: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x1E: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x1F: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x20: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x21: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x22: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x23: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x24: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x25: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x26: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x27: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x28: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x29: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x2A: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x2B: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x2C: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x2D: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x2E: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x2F: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x30: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x31: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x32: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x33: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x34: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x35: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x36: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x37: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x38: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x39: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x3A: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x3B: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x3C: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x3D: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x3E: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x3F: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x40: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x41: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x42: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x43: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x44: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x45: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x46: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x47: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x48: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x49: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x4A: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x4B: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x4C: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x4D: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x4E: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x4F: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x50: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x51: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x52: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x53: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x54: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x55: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x56: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x57: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x58: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x59: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x5A: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x5B: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x5C: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x5D: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x5E: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x5F: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x60: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x61: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x62: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x63: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x64: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x65: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x66: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x67: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x68: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x69: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x6A: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x6B: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x6C: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x6D: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x6E: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x6F: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x70: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x71: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x72: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x73: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x74: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x75: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x76: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x77: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x78: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x79: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x7A: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x7B: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x7C: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x7D: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x7E: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x7F: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x80: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x81: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x82: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x83: r8 = &reg_al; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x84: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x85: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x86: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x87: r8 = &reg_al; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x88: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x89: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x8A: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x8B: r8 = &reg_cl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x8C: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x8D: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x8E: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x8F: r8 = &reg_cl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x90: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x91: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x92: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x93: r8 = &reg_dl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x94: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x95: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x96: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x97: r8 = &reg_dl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x98: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x99: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x9A: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x9B: r8 = &reg_bl; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x9C: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x9D: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x9E: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x9F: r8 = &reg_bl; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA0: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA1: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xA2: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xA3: r8 = &reg_ah; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xA4: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xA5: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xA6: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xA7: r8 = &reg_ah; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA8: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA9: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xAA: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xAB: r8 = &reg_ch; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xAC: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xAD: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xAE: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xAF: r8 = &reg_ch; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB0: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB1: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xB2: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xB3: r8 = &reg_dh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xB4: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xB5: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xB6: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xB7: r8 = &reg_dh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB8: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB9: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xBA: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xBB: r8 = &reg_bh; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xBC: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xBD: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xBE: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xBF: r8 = &reg_bh; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xC0: r8 = &reg_al; rm8 = (&reg_al); break;
		case 0xC1: r8 = &reg_al; rm8 = (&reg_cl); break;
		case 0xC2: r8 = &reg_al; rm8 = (&reg_dl); break;
		case 0xC3: r8 = &reg_al; rm8 = (&reg_bl); break;
		case 0xC4: r8 = &reg_al; rm8 = (&reg_ah); break;
		case 0xC5: r8 = &reg_al; rm8 = (&reg_ch); break;
		case 0xC6: r8 = &reg_al; rm8 = (&reg_dh); break;
		case 0xC7: r8 = &reg_al; rm8 = (&reg_bh); break;
		case 0xC8: r8 = &reg_cl; rm8 = (&reg_al); break;
		case 0xC9: r8 = &reg_cl; rm8 = (&reg_cl); break;
		case 0xCA: r8 = &reg_cl; rm8 = (&reg_dl); break;
		case 0xCB: r8 = &reg_cl; rm8 = (&reg_bl); break;
		case 0xCC: r8 = &reg_cl; rm8 = (&reg_ah); break;
		case 0xCD: r8 = &reg_cl; rm8 = (&reg_ch); break;
		case 0xCE: r8 = &reg_cl; rm8 = (&reg_dh); break;
		case 0xCF: r8 = &reg_cl; rm8 = (&reg_bh); break;
		case 0xD0: r8 = &reg_dl; rm8 = (&reg_al); break;
		case 0xD1: r8 = &reg_dl; rm8 = (&reg_cl); break;
		case 0xD2: r8 = &reg_dl; rm8 = (&reg_dl); break;
		case 0xD3: r8 = &reg_dl; rm8 = (&reg_bl); break;
		case 0xD4: r8 = &reg_dl; rm8 = (&reg_ah); break;
		case 0xD5: r8 = &reg_dl; rm8 = (&reg_ch); break;
		case 0xD6: r8 = &reg_dl; rm8 = (&reg_dh); break;
		case 0xD7: r8 = &reg_dl; rm8 = (&reg_bh); break;
		case 0xD8: r8 = &reg_bl; rm8 = (&reg_al); break;
		case 0xD9: r8 = &reg_bl; rm8 = (&reg_cl); break;
		case 0xDA: r8 = &reg_bl; rm8 = (&reg_dl); break;
		case 0xDB: r8 = &reg_bl; rm8 = (&reg_bl); break;
		case 0xDC: r8 = &reg_bl; rm8 = (&reg_ah); break;
		case 0xDD: r8 = &reg_bl; rm8 = (&reg_ch); break;
		case 0xDE: r8 = &reg_bl; rm8 = (&reg_dh); break;
		case 0xDF: r8 = &reg_bl; rm8 = (&reg_bh); break;
		case 0xE0: r8 = &reg_ah; rm8 = (&reg_al); break;
		case 0xE1: r8 = &reg_ah; rm8 = (&reg_cl); break;
		case 0xE2: r8 = &reg_ah; rm8 = (&reg_dl); break;
		case 0xE3: r8 = &reg_ah; rm8 = (&reg_bl); break;
		case 0xE4: r8 = &reg_ah; rm8 = (&reg_ah); break;
		case 0xE5: r8 = &reg_ah; rm8 = (&reg_ch); break;
		case 0xE6: r8 = &reg_ah; rm8 = (&reg_dh); break;
		case 0xE7: r8 = &reg_ah; rm8 = (&reg_bh); break;
		case 0xE8: r8 = &reg_ch; rm8 = (&reg_al); break;
		case 0xE9: r8 = &reg_ch; rm8 = (&reg_cl); break;
		case 0xEA: r8 = &reg_ch; rm8 = (&reg_dl); break;
		case 0xEB: r8 = &reg_ch; rm8 = (&reg_bl); break;
		case 0xEC: r8 = &reg_ch; rm8 = (&reg_ah); break;
		case 0xED: r8 = &reg_ch; rm8 = (&reg_ch); break;
		case 0xEE: r8 = &reg_ch; rm8 = (&reg_dh); break;
		case 0xEF: r8 = &reg_ch; rm8 = (&reg_bh); break;
		case 0xF0: r8 = &reg_dh; rm8 = (&reg_al); break;
		case 0xF1: r8 = &reg_dh; rm8 = (&reg_cl); break;
		case 0xF2: r8 = &reg_dh; rm8 = (&reg_dl); break;
		case 0xF3: r8 = &reg_dh; rm8 = (&reg_bl); break;
		case 0xF4: r8 = &reg_dh; rm8 = (&reg_ah); break;
		case 0xF5: r8 = &reg_dh; rm8 = (&reg_ch); break;
		case 0xF6: r8 = &reg_dh; rm8 = (&reg_dh); break;
		case 0xF7: r8 = &reg_dh; rm8 = (&reg_bh); break;
		case 0xF8: r8 = &reg_bh; rm8 = (&reg_al); break;
		case 0xF9: r8 = &reg_bh; rm8 = (&reg_cl); break;
		case 0xFA: r8 = &reg_bh; rm8 = (&reg_dl); break;
		case 0xFB: r8 = &reg_bh; rm8 = (&reg_bl); break;
		case 0xFC: r8 = &reg_bh; rm8 = (&reg_ah); break;
		case 0xFD: r8 = &reg_bh; rm8 = (&reg_ch); break;
		case 0xFE: r8 = &reg_bh; rm8 = (&reg_dh); break;
		case 0xFF: r8 = &reg_bh; rm8 = (&reg_bh); break;
	}
}

void fetch_modrm16()
{
	switch(fetchb())
	{
		case 0x00: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x01: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x02: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x03: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x04: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x05: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x06: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x07: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x08: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x09: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x0A: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x0B: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x0C: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x0D: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x0E: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x0F: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x10: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x11: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x12: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x13: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x14: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x15: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x16: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x17: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x18: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x19: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x1A: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x1B: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x1C: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x1D: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x1E: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x1F: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x20: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x21: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x22: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x23: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x24: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x25: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x26: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x27: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x28: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x29: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x2A: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x2B: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x2C: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x2D: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x2E: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x2F: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x30: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x31: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x32: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x33: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x34: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x35: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x36: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x37: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x38: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x39: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x3A: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x3B: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x3C: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x3D: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x3E: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x3F: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x40: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x41: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x42: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x43: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x44: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x45: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x46: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x47: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x48: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x49: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x4A: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x4B: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x4C: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x4D: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x4E: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x4F: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x50: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x51: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x52: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x53: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x54: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x55: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x56: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x57: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x58: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x59: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x5A: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x5B: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x5C: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x5D: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x5E: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x5F: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x60: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x61: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x62: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x63: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x64: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x65: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x66: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x67: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x68: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x69: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x6A: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x6B: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x6C: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x6D: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x6E: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x6F: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x70: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x71: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x72: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x73: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x74: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x75: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x76: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x77: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x78: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x79: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x7A: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x7B: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x7C: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x7D: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x7E: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x7F: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x80: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x81: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x82: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x83: r16 = &reg_ax; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x84: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x85: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x86: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x87: r16 = &reg_ax; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x88: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x89: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x8A: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x8B: r16 = &reg_cx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x8C: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x8D: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x8E: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x8F: r16 = &reg_cx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x90: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x91: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x92: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x93: r16 = &reg_dx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x94: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x95: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x96: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x97: r16 = &reg_dx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x98: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x99: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x9A: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x9B: r16 = &reg_bx; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x9C: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x9D: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x9E: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x9F: r16 = &reg_bx; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA0: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA1: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xA2: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xA3: r16 = &reg_sp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xA4: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xA5: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xA6: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xA7: r16 = &reg_sp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA8: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA9: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xAA: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xAB: r16 = &reg_bp; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xAC: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xAD: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xAE: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xAF: r16 = &reg_bp; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB0: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB1: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xB2: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xB3: r16 = &reg_si; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xB4: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xB5: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xB6: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xB7: r16 = &reg_si; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB8: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB9: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xBA: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xBB: r16 = &reg_di; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xBC: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xBD: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xBE: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xBF: r16 = &reg_di; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xC0: r16 = &reg_ax; rm16 = (&reg_ax); break;
		case 0xC1: r16 = &reg_ax; rm16 = (&reg_cx); break;
		case 0xC2: r16 = &reg_ax; rm16 = (&reg_dx); break;
		case 0xC3: r16 = &reg_ax; rm16 = (&reg_bx); break;
		case 0xC4: r16 = &reg_ax; rm16 = (&reg_sp); break;
		case 0xC5: r16 = &reg_ax; rm16 = (&reg_bp); break;
		case 0xC6: r16 = &reg_ax; rm16 = (&reg_si); break;
		case 0xC7: r16 = &reg_ax; rm16 = (&reg_di); break;
		case 0xC8: r16 = &reg_cx; rm16 = (&reg_ax); break;
		case 0xC9: r16 = &reg_cx; rm16 = (&reg_cx); break;
		case 0xCA: r16 = &reg_cx; rm16 = (&reg_dx); break;
		case 0xCB: r16 = &reg_cx; rm16 = (&reg_bx); break;
		case 0xCC: r16 = &reg_cx; rm16 = (&reg_sp); break;
		case 0xCD: r16 = &reg_cx; rm16 = (&reg_bp); break;
		case 0xCE: r16 = &reg_cx; rm16 = (&reg_si); break;
		case 0xCF: r16 = &reg_cx; rm16 = (&reg_di); break;
		case 0xD0: r16 = &reg_dx; rm16 = (&reg_ax); break;
		case 0xD1: r16 = &reg_dx; rm16 = (&reg_cx); break;
		case 0xD2: r16 = &reg_dx; rm16 = (&reg_dx); break;
		case 0xD3: r16 = &reg_dx; rm16 = (&reg_bx); break;
		case 0xD4: r16 = &reg_dx; rm16 = (&reg_sp); break;
		case 0xD5: r16 = &reg_dx; rm16 = (&reg_bp); break;
		case 0xD6: r16 = &reg_dx; rm16 = (&reg_si); break;
		case 0xD7: r16 = &reg_dx; rm16 = (&reg_di); break;
		case 0xD8: r16 = &reg_bx; rm16 = (&reg_ax); break;
		case 0xD9: r16 = &reg_bx; rm16 = (&reg_cx); break;
		case 0xDA: r16 = &reg_bx; rm16 = (&reg_dx); break;
		case 0xDB: r16 = &reg_bx; rm16 = (&reg_bx); break;
		case 0xDC: r16 = &reg_bx; rm16 = (&reg_sp); break;
		case 0xDD: r16 = &reg_bx; rm16 = (&reg_bp); break;
		case 0xDE: r16 = &reg_bx; rm16 = (&reg_si); break;
		case 0xDF: r16 = &reg_bx; rm16 = (&reg_di); break;
		case 0xE0: r16 = &reg_sp; rm16 = (&reg_ax); break;
		case 0xE1: r16 = &reg_sp; rm16 = (&reg_cx); break;
		case 0xE2: r16 = &reg_sp; rm16 = (&reg_dx); break;
		case 0xE3: r16 = &reg_sp; rm16 = (&reg_bx); break;
		case 0xE4: r16 = &reg_sp; rm16 = (&reg_sp); break;
		case 0xE5: r16 = &reg_sp; rm16 = (&reg_bp); break;
		case 0xE6: r16 = &reg_sp; rm16 = (&reg_si); break;
		case 0xE7: r16 = &reg_sp; rm16 = (&reg_di); break;
		case 0xE8: r16 = &reg_bp; rm16 = (&reg_ax); break;
		case 0xE9: r16 = &reg_bp; rm16 = (&reg_cx); break;
		case 0xEA: r16 = &reg_bp; rm16 = (&reg_dx); break;
		case 0xEB: r16 = &reg_bp; rm16 = (&reg_bx); break;
		case 0xEC: r16 = &reg_bp; rm16 = (&reg_sp); break;
		case 0xED: r16 = &reg_bp; rm16 = (&reg_bp); break;
		case 0xEE: r16 = &reg_bp; rm16 = (&reg_si); break;
		case 0xEF: r16 = &reg_bp; rm16 = (&reg_di); break;
		case 0xF0: r16 = &reg_si; rm16 = (&reg_ax); break;
		case 0xF1: r16 = &reg_si; rm16 = (&reg_cx); break;
		case 0xF2: r16 = &reg_si; rm16 = (&reg_dx); break;
		case 0xF3: r16 = &reg_si; rm16 = (&reg_bx); break;
		case 0xF4: r16 = &reg_si; rm16 = (&reg_sp); break;
		case 0xF5: r16 = &reg_si; rm16 = (&reg_bp); break;
		case 0xF6: r16 = &reg_si; rm16 = (&reg_si); break;
		case 0xF7: r16 = &reg_si; rm16 = (&reg_di); break;
		case 0xF8: r16 = &reg_di; rm16 = (&reg_ax); break;
		case 0xF9: r16 = &reg_di; rm16 = (&reg_cx); break;
		case 0xFA: r16 = &reg_di; rm16 = (&reg_dx); break;
		case 0xFB: r16 = &reg_di; rm16 = (&reg_bx); break;
		case 0xFC: r16 = &reg_di; rm16 = (&reg_sp); break;
		case 0xFD: r16 = &reg_di; rm16 = (&reg_bp); break;
		case 0xFE: r16 = &reg_di; rm16 = (&reg_si); break;
		case 0xFF: r16 = &reg_di; rm16 = (&reg_di); break;
	}
}

void fetch_modrm8_opex()
{
	switch(fetchb())
	{
		case 0x00: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x01: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x02: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x03: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x04: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x05: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x06: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x07: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x08: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x09: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x0A: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x0B: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x0C: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x0D: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x0E: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x0F: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x10: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x11: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x12: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x13: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x14: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x15: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x16: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x17: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x18: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x19: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x1A: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x1B: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x1C: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x1D: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x1E: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x1F: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x20: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x21: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x22: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x23: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x24: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x25: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x26: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x27: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x28: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x29: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x2A: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x2B: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x2C: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x2D: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x2E: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x2F: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x30: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x31: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x32: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x33: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x34: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x35: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x36: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x37: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x38: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x39: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x3A: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x3B: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x3C: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_si); break;
		case 0x3D: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_di); break;
		case 0x3E: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + disp16); break;
		case 0x3F: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx); break;
		case 0x40: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x41: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x42: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x43: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x44: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x45: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x46: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x47: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x48: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x49: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x4A: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x4B: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x4C: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x4D: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x4E: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x4F: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x50: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x51: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x52: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x53: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x54: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x55: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x56: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x57: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x58: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x59: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x5A: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x5B: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x5C: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x5D: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x5E: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x5F: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x60: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x61: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x62: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x63: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x64: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x65: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x66: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x67: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x68: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x69: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x6A: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x6B: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x6C: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x6D: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x6E: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x6F: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x70: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x71: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x72: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x73: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x74: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x75: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x76: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x77: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x78: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x79: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x7A: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x7B: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x7C: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x7D: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x7E: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x7F: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x80: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x81: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x82: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x83: opex = 0; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x84: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x85: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x86: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x87: opex = 0; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x88: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x89: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x8A: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x8B: opex = 1; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x8C: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x8D: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x8E: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x8F: opex = 1; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x90: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x91: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x92: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x93: opex = 2; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x94: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x95: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x96: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x97: opex = 2; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x98: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x99: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x9A: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x9B: opex = 3; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x9C: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x9D: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x9E: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x9F: opex = 3; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA0: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA1: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xA2: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xA3: opex = 4; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xA4: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xA5: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xA6: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xA7: opex = 4; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA8: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA9: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xAA: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xAB: opex = 5; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xAC: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xAD: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xAE: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xAF: opex = 5; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB0: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB1: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xB2: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xB3: opex = 6; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xB4: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xB5: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xB6: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xB7: opex = 6; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB8: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB9: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xBA: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xBB: opex = 7; rm8 = (bit8u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xBC: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xBD: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xBE: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xBF: opex = 7; rm8 = (bit8u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xC0: opex = 0; rm8 = (&reg_al); break;
		case 0xC1: opex = 0; rm8 = (&reg_cl); break;
		case 0xC2: opex = 0; rm8 = (&reg_dl); break;
		case 0xC3: opex = 0; rm8 = (&reg_bl); break;
		case 0xC4: opex = 0; rm8 = (&reg_ah); break;
		case 0xC5: opex = 0; rm8 = (&reg_ch); break;
		case 0xC6: opex = 0; rm8 = (&reg_dh); break;
		case 0xC7: opex = 0; rm8 = (&reg_bh); break;
		case 0xC8: opex = 1; rm8 = (&reg_al); break;
		case 0xC9: opex = 1; rm8 = (&reg_cl); break;
		case 0xCA: opex = 1; rm8 = (&reg_dl); break;
		case 0xCB: opex = 1; rm8 = (&reg_bl); break;
		case 0xCC: opex = 1; rm8 = (&reg_ah); break;
		case 0xCD: opex = 1; rm8 = (&reg_ch); break;
		case 0xCE: opex = 1; rm8 = (&reg_dh); break;
		case 0xCF: opex = 1; rm8 = (&reg_bh); break;
		case 0xD0: opex = 2; rm8 = (&reg_al); break;
		case 0xD1: opex = 2; rm8 = (&reg_cl); break;
		case 0xD2: opex = 2; rm8 = (&reg_dl); break;
		case 0xD3: opex = 2; rm8 = (&reg_bl); break;
		case 0xD4: opex = 2; rm8 = (&reg_ah); break;
		case 0xD5: opex = 2; rm8 = (&reg_ch); break;
		case 0xD6: opex = 2; rm8 = (&reg_dh); break;
		case 0xD7: opex = 2; rm8 = (&reg_bh); break;
		case 0xD8: opex = 3; rm8 = (&reg_al); break;
		case 0xD9: opex = 3; rm8 = (&reg_cl); break;
		case 0xDA: opex = 3; rm8 = (&reg_dl); break;
		case 0xDB: opex = 3; rm8 = (&reg_bl); break;
		case 0xDC: opex = 3; rm8 = (&reg_ah); break;
		case 0xDD: opex = 3; rm8 = (&reg_ch); break;
		case 0xDE: opex = 3; rm8 = (&reg_dh); break;
		case 0xDF: opex = 3; rm8 = (&reg_bh); break;
		case 0xE0: opex = 4; rm8 = (&reg_al); break;
		case 0xE1: opex = 4; rm8 = (&reg_cl); break;
		case 0xE2: opex = 4; rm8 = (&reg_dl); break;
		case 0xE3: opex = 4; rm8 = (&reg_bl); break;
		case 0xE4: opex = 4; rm8 = (&reg_ah); break;
		case 0xE5: opex = 4; rm8 = (&reg_ch); break;
		case 0xE6: opex = 4; rm8 = (&reg_dh); break;
		case 0xE7: opex = 4; rm8 = (&reg_bh); break;
		case 0xE8: opex = 5; rm8 = (&reg_al); break;
		case 0xE9: opex = 5; rm8 = (&reg_cl); break;
		case 0xEA: opex = 5; rm8 = (&reg_dl); break;
		case 0xEB: opex = 5; rm8 = (&reg_bl); break;
		case 0xEC: opex = 5; rm8 = (&reg_ah); break;
		case 0xED: opex = 5; rm8 = (&reg_ch); break;
		case 0xEE: opex = 5; rm8 = (&reg_dh); break;
		case 0xEF: opex = 5; rm8 = (&reg_bh); break;
		case 0xF0: opex = 6; rm8 = (&reg_al); break;
		case 0xF1: opex = 6; rm8 = (&reg_cl); break;
		case 0xF2: opex = 6; rm8 = (&reg_dl); break;
		case 0xF3: opex = 6; rm8 = (&reg_bl); break;
		case 0xF4: opex = 6; rm8 = (&reg_ah); break;
		case 0xF5: opex = 6; rm8 = (&reg_ch); break;
		case 0xF6: opex = 6; rm8 = (&reg_dh); break;
		case 0xF7: opex = 6; rm8 = (&reg_bh); break;
		case 0xF8: opex = 7; rm8 = (&reg_al); break;
		case 0xF9: opex = 7; rm8 = (&reg_cl); break;
		case 0xFA: opex = 7; rm8 = (&reg_dl); break;
		case 0xFB: opex = 7; rm8 = (&reg_bl); break;
		case 0xFC: opex = 7; rm8 = (&reg_ah); break;
		case 0xFD: opex = 7; rm8 = (&reg_ch); break;
		case 0xFE: opex = 7; rm8 = (&reg_dh); break;
		case 0xFF: opex = 7; rm8 = (&reg_bh); break;
	}
}

void fetch_modrm16_opex()
{
	switch(fetchb())
	{
		case 0x00: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x01: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x02: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x03: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x04: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x05: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x06: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x07: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x08: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x09: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x0A: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x0B: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x0C: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x0D: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x0E: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x0F: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x10: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x11: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x12: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x13: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x14: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x15: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x16: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x17: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x18: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x19: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x1A: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x1B: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x1C: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x1D: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x1E: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x1F: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x20: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x21: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x22: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x23: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x24: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x25: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x26: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x27: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x28: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x29: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x2A: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x2B: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x2C: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x2D: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x2E: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x2F: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x30: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x31: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x32: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x33: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x34: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x35: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x36: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x37: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x38: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si); break;
		case 0x39: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di); break;
		case 0x3A: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si); break;
		case 0x3B: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di); break;
		case 0x3C: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_si); break;
		case 0x3D: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_di); break;
		case 0x3E: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + disp16); break;
		case 0x3F: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx); break;
		case 0x40: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x41: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x42: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x43: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x44: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x45: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x46: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x47: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x48: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x49: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x4A: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x4B: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x4C: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x4D: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x4E: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x4F: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x50: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x51: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x52: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x53: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x54: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x55: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x56: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x57: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x58: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x59: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x5A: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x5B: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x5C: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x5D: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x5E: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x5F: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x60: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x61: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x62: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x63: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x64: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x65: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x66: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x67: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x68: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x69: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x6A: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x6B: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x6C: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x6D: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x6E: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x6F: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x70: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x71: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x72: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x73: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x74: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x75: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x76: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x77: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x78: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp8); break;
		case 0x79: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp8); break;
		case 0x7A: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp8); break;
		case 0x7B: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp8); break;
		case 0x7C: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp8); break;
		case 0x7D: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp8); break;
		case 0x7E: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp8); break;
		case 0x7F: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp8); break;
		case 0x80: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x81: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x82: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x83: opex = 0; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x84: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x85: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x86: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x87: opex = 0; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x88: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x89: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x8A: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x8B: opex = 1; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x8C: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x8D: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x8E: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x8F: opex = 1; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x90: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x91: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x92: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x93: opex = 2; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x94: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x95: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x96: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x97: opex = 2; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0x98: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0x99: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0x9A: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0x9B: opex = 3; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0x9C: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0x9D: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0x9E: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0x9F: opex = 3; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA0: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA1: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xA2: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xA3: opex = 4; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xA4: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xA5: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xA6: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xA7: opex = 4; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xA8: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xA9: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xAA: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xAB: opex = 5; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xAC: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xAD: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xAE: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xAF: opex = 5; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB0: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB1: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xB2: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xB3: opex = 6; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xB4: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xB5: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xB6: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xB7: opex = 6; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xB8: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_si + disp16); break;
		case 0xB9: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + reg_di + disp16); break;
		case 0xBA: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_si + disp16); break;
		case 0xBB: opex = 7; rm16 = (bit16u *)(segreg[SS].ptr + reg_bp + reg_di + disp16); break;
		case 0xBC: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_si + disp16); break;
		case 0xBD: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_di + disp16); break;
		case 0xBE: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bp + disp16); break;
		case 0xBF: opex = 7; rm16 = (bit16u *)(segreg[DS].ptr + reg_bx + disp16); break;
		case 0xC0: opex = 0; rm16 = (&reg_ax); break;
		case 0xC1: opex = 0; rm16 = (&reg_cx); break;
		case 0xC2: opex = 0; rm16 = (&reg_dx); break;
		case 0xC3: opex = 0; rm16 = (&reg_bx); break;
		case 0xC4: opex = 0; rm16 = (&reg_sp); break;
		case 0xC5: opex = 0; rm16 = (&reg_bp); break;
		case 0xC6: opex = 0; rm16 = (&reg_si); break;
		case 0xC7: opex = 0; rm16 = (&reg_di); break;
		case 0xC8: opex = 1; rm16 = (&reg_ax); break;
		case 0xC9: opex = 1; rm16 = (&reg_cx); break;
		case 0xCA: opex = 1; rm16 = (&reg_dx); break;
		case 0xCB: opex = 1; rm16 = (&reg_bx); break;
		case 0xCC: opex = 1; rm16 = (&reg_sp); break;
		case 0xCD: opex = 1; rm16 = (&reg_bp); break;
		case 0xCE: opex = 1; rm16 = (&reg_si); break;
		case 0xCF: opex = 1; rm16 = (&reg_di); break;
		case 0xD0: opex = 2; rm16 = (&reg_ax); break;
		case 0xD1: opex = 2; rm16 = (&reg_cx); break;
		case 0xD2: opex = 2; rm16 = (&reg_dx); break;
		case 0xD3: opex = 2; rm16 = (&reg_bx); break;
		case 0xD4: opex = 2; rm16 = (&reg_sp); break;
		case 0xD5: opex = 2; rm16 = (&reg_bp); break;
		case 0xD6: opex = 2; rm16 = (&reg_si); break;
		case 0xD7: opex = 2; rm16 = (&reg_di); break;
		case 0xD8: opex = 3; rm16 = (&reg_ax); break;
		case 0xD9: opex = 3; rm16 = (&reg_cx); break;
		case 0xDA: opex = 3; rm16 = (&reg_dx); break;
		case 0xDB: opex = 3; rm16 = (&reg_bx); break;
		case 0xDC: opex = 3; rm16 = (&reg_sp); break;
		case 0xDD: opex = 3; rm16 = (&reg_bp); break;
		case 0xDE: opex = 3; rm16 = (&reg_si); break;
		case 0xDF: opex = 3; rm16 = (&reg_di); break;
		case 0xE0: opex = 4; rm16 = (&reg_ax); break;
		case 0xE1: opex = 4; rm16 = (&reg_cx); break;
		case 0xE2: opex = 4; rm16 = (&reg_dx); break;
		case 0xE3: opex = 4; rm16 = (&reg_bx); break;
		case 0xE4: opex = 4; rm16 = (&reg_sp); break;
		case 0xE5: opex = 4; rm16 = (&reg_bp); break;
		case 0xE6: opex = 4; rm16 = (&reg_si); break;
		case 0xE7: opex = 4; rm16 = (&reg_di); break;
		case 0xE8: opex = 5; rm16 = (&reg_ax); break;
		case 0xE9: opex = 5; rm16 = (&reg_cx); break;
		case 0xEA: opex = 5; rm16 = (&reg_dx); break;
		case 0xEB: opex = 5; rm16 = (&reg_bx); break;
		case 0xEC: opex = 5; rm16 = (&reg_sp); break;
		case 0xED: opex = 5; rm16 = (&reg_bp); break;
		case 0xEE: opex = 5; rm16 = (&reg_si); break;
		case 0xEF: opex = 5; rm16 = (&reg_di); break;
		case 0xF0: opex = 6; rm16 = (&reg_ax); break;
		case 0xF1: opex = 6; rm16 = (&reg_cx); break;
		case 0xF2: opex = 6; rm16 = (&reg_dx); break;
		case 0xF3: opex = 6; rm16 = (&reg_bx); break;
		case 0xF4: opex = 6; rm16 = (&reg_sp); break;
		case 0xF5: opex = 6; rm16 = (&reg_bp); break;
		case 0xF6: opex = 6; rm16 = (&reg_si); break;
		case 0xF7: opex = 6; rm16 = (&reg_di); break;
		case 0xF8: opex = 7; rm16 = (&reg_ax); break;
		case 0xF9: opex = 7; rm16 = (&reg_cx); break;
		case 0xFA: opex = 7; rm16 = (&reg_dx); break;
		case 0xFB: opex = 7; rm16 = (&reg_bx); break;
		case 0xFC: opex = 7; rm16 = (&reg_sp); break;
		case 0xFD: opex = 7; rm16 = (&reg_bp); break;
		case 0xFE: opex = 7; rm16 = (&reg_si); break;
		case 0xFF: opex = 7; rm16 = (&reg_di); break;
	}
}

#endif /* __CPU_MODRM_H */
